#!/usr/bin/env python

import sys
import json
import os

from spotitag.client import Client

import spotipy
import spotipy.util as util

from pprint import pprint


def pick_device(client):
    devices = client.active_devices()
    if not devices:
        raise Exception("Did not find any active devices")

    if len(devices) == 1:
        return devices[0]

    pick = None
    while not (0 <= pick < len(devices)):
        print("Available devices:")
        for pos, device in enumerate(devices):
            print(f"{pos} - {device}")
            pick = int(input("Choose device: "))


def load_playlist(client, name):
    if os.path.exists(name):
        with open(name) as f:
            return name, json.loads(f.read())

    playlist = client.find_playlist(name)
    tracks = client.tracks(playlist['id'])
    return f"{name}.json", tracks


def print_track(track):
    print("-------------------------")
    print(f"Track: {track['name']}")
    print(f"Album: {track['album']}")
    print(f"BPM: {track['bpm']}")
    print("Artists: {}".format(', '.join(track['artists'])))
    if 'tags' in track:
        tags = ", ".join(f"{key}: {value}" for key, value in track['tags'].items())
        print(f"Tags: {tags}")


if __name__ == "__main__":
    username, playlist = sys.argv[1:]
    client = Client.login(username)

    print("loading playlist")
    output, tracks = load_playlist(client, playlist)

    print("finding a device")
    device = pick_device(client)

    print("starting playback")
    uris = ["spotify:track:{}".format(t['id']) for t in tracks]
    client.sp.start_playback(device['id'], uris=uris)

    for track in tracks:
        print_track(track)

        tags = input("Add Tags: ")
        tags = dict(t.split(':') for t in tags.split(','))
        track.setdefault('tags', {}).update(tags)

        with open(output, mode='w') as f:
            f.write(json.dumps(tracks))

        client.sp.next_track(device['id'])
