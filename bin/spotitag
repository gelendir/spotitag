#!/usr/bin/env python

import click
import os
import json

from spotitag.util import login, pick_device
from spotitag.metadata import Metadata
from spotitag import ui


@click.group()
@click.option('--username', envvar='USERNAME', required=True, help='spotify username')
@click.pass_context
def cli(ctx, username):
    os.putenv("SPOTIPY_REDIRECT_URI", "http://localhost")
    if not os.environ.get('SPOTIPY_CLIENT_ID'):
        raise Exception("SPOTIPY_CLIENT_ID required")
    if not os.environ.get('SPOTIPY_CLIENT_SECRET'):
        raise Exception("SPOTIPY_CLIENT_SECRET required")

    ctx.ensure_object(dict)
    ctx.obj['client'] = login(username)


@cli.command(name='import', help='import a spotify playlist to JSON')
@click.argument('playlist')
@click.option('--user/--no-user', help="search current user's playlists")
@click.option('--output', help='output JSON to file')
@click.pass_context
def import_(ctx, playlist, user, output):
    metadata = Metadata(ctx.obj['client'])

    if user:
        results = metadata.find_user_playlists(playlist)
    else:
        results = metadata.search_playlists(playlist)

    if not results:
        raise Exception("No playlist found")

    selected = choose_playlist(results)
    print("fetching metadata...")
    tracks = metadata.tracks(selected['id'])

    if not output:
        output = f"{selected['name']}.json"

    with open(output, mode='w') as f:
        f.write(json.dumps(tracks))


def choose_playlist(results):
    print("Choose a playlist:")
    pick = 0
    while not 1 <= pick <= len(results):
        for pos, result in enumerate(results, 1):
            print(f"{pos} - {result['name']} ({result['owner']['display_name']})")
        print()

        try:
            pick = int(input("Choice: "))
        except ValueError:
            print("Invalid input")

    return results[pick-1]


@cli.command(help='compare spotify BPM with a tapped BPM')
@click.argument('playlist')
@click.option('--output', help='output to a different file. Default: write to same file')
@click.pass_context
def bpm(ctx, playlist, output):
    if not output:
        output = playlist

    with open(playlist) as f:
        tracks = json.loads(f.read())

    device = pick_device(ctx.obj['client'])
    tracks = ui.run(ctx.obj['client'], device['id'], tracks)

    with open(output, mode='w') as f:
        f.write(json.dumps(tracks))


@cli.command(help="export a playlist to spotify")
@click.argument('filename')
@click.argument('playlist')
@click.option('--public/--no-public', default=False, help='make playlist public or not')
@click.pass_context
def export(ctx, filename, playlist, public):
    with open(filename) as f:
        tracks = json.loads(f.read())

    client = ctx.obj['client']
    user = client.current_user()
    response = client.user_playlist_create(user['id'], playlist, public=public)

    track_ids = [t['id'] for t in tracks]
    client.user_playlist_add_tracks(user['id'], response['id'], track_ids)


@cli.command(help="add currently playing song to a playlist")
@click.argument('playlist')
@click.pass_context
def add_current(ctx, playlist):
    client = ctx.obj['client']
    metadata = Metadata(client)

    user = client.current_user()
    results = metadata.find_user_playlists(playlist)
    if len(results) != 1:
        raise Exception(f"Expected 1 playlist. Found {len(results)}")

    response = client.currently_playing()
    client.user_playlist_add_tracks(user['id'], results[0]['id'], [response['item']['id']])


if __name__ == "__main__":
    cli()
